library(RWeka)
library(Weka)
?RWek
??RWeka
install.packages("RWeka")
install.packages('nerualnet')
quit()
x= 1:10
x
install.packages('neuralnet')
library("neuralnet")
traininginput <-  as.data.frame(runif(50, min=0, max=100))
head(traininginput)
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
head(trainingdata)
dim(trainingdata)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
head(testdata)
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
net.results
print(net.results$net.result)
demo(graphics)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=100, threshold=0.01)
plot(net.sqrt)
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
print(net.results$net.result)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=5, threshold=0.01)
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
print(net.results$net.result)
plot(net.sqrt)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=c(10,10), threshold=0.001)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=c(10,10,10,10,10), threshold=0.001)
testdata <- as.data.frame((40:50)) #Generate 1 through 10
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
#ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,testdata^2,
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(trainingdata)
trainingdata
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?round
source('~/Dropbox/Coursework/CurrentCourses/AI/RExampleNN.R', echo=TRUE)
source('~/Dropbox/Coursework/CurrentCourses/AI/RExampleNN.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?read,scv
?read.csv
print("Accuracy")
library("neuralnet")
trainingIn <-  as.data.frame(sample(1:200,30))
trainingOut <- sqrt(trainingIn)
trainingSet <- cbind(trainingIn,trainingOut)
colnames(trainingSet) <- c("Input","Output")
print(head(trainingSet))
neuralnet
NNObject <- neuralnet(Output~Input,data = trainingSet, hidden=c(10), threshold=0.01)
plot(NNObject)
ls(prediction)
testdata <- as.data.frame(sample(1:200, 10))    #((1:10)^2) #Generate some squared numbers
prediction <- compute(NNObject, testdata) #Run them through nn to get output
ls(prediction)
resultTab <- cbind(testdata,round(sqrt(testdata),digits=3),
as.data.frame(round(prediction$net.result, digits=3)))
resultTab <- cbind(resultTab, resultTab[,2]-resultTab[,3])
colnames(resultTab) <- c("Input","Expected Out","NN Output", "Diff")
print(resultTab)
NNObject <- neuralnet(Output~Input,data = trainingSet, hidden=c(20), threshold=0.1)
#Plot the neural network
plot(NNObject)
#Test the neural network on some training data
testdata <- as.data.frame(sample(1:200, 10))    #((1:10)^2) #Generate some squared numbers
prediction <- compute(NNObject, testdata) #Run them through nn to get output
# Properties
ls(prediction)
#Lets see the results
print(prediction$net.result)
#Display Results Table
resultTab <- cbind(testdata,round(sqrt(testdata),digits=3),
as.data.frame(round(prediction$net.result, digits=3)))
resultTab <- cbind(resultTab, resultTab[,2]-resultTab[,3])
colnames(resultTab) <- c("Input","Expected Out","NN Output", "Diff")
print(resultTab)
NNObject <- neuralnet(Output~Input,data = trainingSet, hidden=c(10,10), threshold=0.1)
#Plot the neural network
plot(NNObject)
#Test the neural network on some training data
testdata <- as.data.frame(sample(1:200, 10))    #((1:10)^2) #Generate some squared numbers
prediction <- compute(NNObject, testdata) #Run them through nn to get output
# Properties
ls(prediction)
#Lets see the results
print(prediction$net.result)
#Display Results Table
resultTab <- cbind(testdata,round(sqrt(testdata),digits=3),
as.data.frame(round(prediction$net.result, digits=3)))
resultTab <- cbind(resultTab, resultTab[,2]-resultTab[,3])
colnames(resultTab) <- c("Input","Expected Out","NN Output", "Diff")
print(resultTab)
b
library("neuralnet")
trainingIn <-  as.data.frame(sample(1:200,30))
trainingOut <- sqrt(trainingIn)
(trainingSet))
i
trainingSet <- cbind(trainingIn,trainingOut)
colnames(trainingSet) <- c("Input","Output")
print(head(trainingSet))
n
NNObject <- neuralnet(Output~Input,data = trainingSet, hidden=c(10), threshold=0.01)
plot(NNObject)
testdata <- as.data.frame(sample(1:200, 10))    #((1:10)^2) #Generate some squared numbers
prediction <- compute(NNObject, testdata)
ls(prediction)
print(prediction$net.result)
#Display Results Table
resultTab <- cbind(testdata,round(sqrt(testdata),digits=3),
as.data.frame(round(prediction$net.result, digits=3)))
resultTab <- cbind(resultTab, resultTab[,2]-resultTab[,3])
colnames(resultTab) <- c("Input","Expected Out","NN Output", "Diff")
print(resultTab)
NNObject <- neuralnet(Output~Input,data = trainingSet, hidden=c(10,10), threshold=0.01)
#Plot the neural network
plot(NNObject)
#Test the neural network on some training data
testdata <- as.data.frame(sample(1:200, 10))    #((1:10)^2) #Generate some squared numbers
#Run them through nn to get output
prediction <- compute(NNObject, testdata)
# Properties
ls(prediction)
#Lets see the results
print(prediction$net.result)
#Display Results Table
resultTab <- cbind(testdata,round(sqrt(testdata),digits=3),
as.data.frame(round(prediction$net.result, digits=3)))
resultTab <- cbind(resultTab, resultTab[,2]-resultTab[,3])
colnames(resultTab) <- c("Input","Expected Out","NN Output", "Diff")
print(resultTab)
install.packages("rpanel")
library(rpanel)
install.packages('rpanel')
library(rpanel)
#setwd("/home/appurvj/Dropbox/Coursework/CurrentCourses/ISS/....")
library(neuralnet)
attackNames<- scan('AttackNames.txt', what = '',sep='\n')
misuseMaster<- read.csv("MisuseMasterDataSet.csv")
nRows<- dim(misuseMaster)[1]
nCols<- dim(misuseMaster)[2]
resultCol<-nCols
varns<-c()
for(i in 1:nCols-1){
varns<-c(varns,var(misuseMaster[,i]))
}
varns <- varns/sum(varns)*100
mainAttCols<- which(varns>1)
mainAttNames<- names(misuseMaster[,mainAttCols])
formula<-mainAttNames[1]
for(name in mainAttNames[-1]){
formula<-paste(formula, name,sep='+')
}
formula<-as.formula(paste('AttackType~',formula,sep=''))
cat('Total Variation Considered: ',sum(varns[mainAttCols]),'%\n')
cat('No of Attributes considered:', length(mainAttCols),'\n\nResults:\n')
attackTypeCol<- misuseMaster$AttackType
misuseMaster<- read.csv("MisuseMasterDataSet.csv")
Sys.time
Sys.time()
a<- Sys.time()
Sys.time()-a
b<-Sys.time()-a
b
ls(Sys.time())
ls(b)
?ls
ls()
properties(a)
??properties
ls(mainAttCols)
Sys.time() - Sys.time()
Sys.time() - a
a$
time
b<-Sys.time()
b<-Sys.time()-b
cat("Execution time: ", b)
memor.size()
memory.size()
object.sizes <- function()
{
return(rev(sort(sapply(ls(envir=.GlobalEnv), function (object.name)
object.size(get(object.name))))))
}
object.sizes()
ls(varns)
object.size()
object.size(a)
installed.packages("rggobi")
library(rggobi)
installed.packages("rggobi")
source("http
://www.ggobi
.org/downlo
ads/inst
all.r")
source("http://www.ggobi.org/downloads/install.r")
install.packages('rggobi')
library(rggobi)
installed.packages('rggobi')
installed.packages('rggobi')
installed.packages('rggobi')
install.packages("rggobi")
install.packages('RGtk2')
install.packages("rggobi")
library(rggobi)
install.packages("rggobi")
library(RGtk2)
install.packages("RGtk2")
source('~/Dropbox/Coursework/CurrentCourses/ISS/ISSProject_Sameera_Appurv_Sagar/Proj2/NNIDSSetectSingleAttack.R', echo=TRUE)
plot (NNObj)
